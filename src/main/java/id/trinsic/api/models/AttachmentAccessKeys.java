/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.trinsic.api.models.ProviderAttachments;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * AttachmentAccessKeys
 */
@JsonPropertyOrder({
  AttachmentAccessKeys.JSON_PROPERTY_SELFIE,
  AttachmentAccessKeys.JSON_PROPERTY_DOCUMENT_FRONT,
  AttachmentAccessKeys.JSON_PROPERTY_DOCUMENT_BACK,
  AttachmentAccessKeys.JSON_PROPERTY_DOCUMENT_PORTRAIT,
  AttachmentAccessKeys.JSON_PROPERTY_PROVIDER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-01T18:44:32.211018983Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class AttachmentAccessKeys {
  public static final String JSON_PROPERTY_SELFIE = "selfie";
  private JsonNullable<String> selfie = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DOCUMENT_FRONT = "documentFront";
  private JsonNullable<String> documentFront = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DOCUMENT_BACK = "documentBack";
  private JsonNullable<String> documentBack = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DOCUMENT_PORTRAIT = "documentPortrait";
  private JsonNullable<String> documentPortrait = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PROVIDER = "provider";
  @javax.annotation.Nonnull
  private ProviderAttachments provider;

  public AttachmentAccessKeys() { 
  }

  public AttachmentAccessKeys selfie(@javax.annotation.Nullable String selfie) {
    this.selfie = JsonNullable.<String>of(selfie);
    return this;
  }

  /**
   * Get selfie
   * @return selfie
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getSelfie() {
        return selfie.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SELFIE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSelfie_JsonNullable() {
    return selfie;
  }
  
  @JsonProperty(JSON_PROPERTY_SELFIE)
  public void setSelfie_JsonNullable(JsonNullable<String> selfie) {
    this.selfie = selfie;
  }

  public void setSelfie(@javax.annotation.Nullable String selfie) {
    this.selfie = JsonNullable.<String>of(selfie);
  }


  public AttachmentAccessKeys documentFront(@javax.annotation.Nullable String documentFront) {
    this.documentFront = JsonNullable.<String>of(documentFront);
    return this;
  }

  /**
   * Get documentFront
   * @return documentFront
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDocumentFront() {
        return documentFront.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DOCUMENT_FRONT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDocumentFront_JsonNullable() {
    return documentFront;
  }
  
  @JsonProperty(JSON_PROPERTY_DOCUMENT_FRONT)
  public void setDocumentFront_JsonNullable(JsonNullable<String> documentFront) {
    this.documentFront = documentFront;
  }

  public void setDocumentFront(@javax.annotation.Nullable String documentFront) {
    this.documentFront = JsonNullable.<String>of(documentFront);
  }


  public AttachmentAccessKeys documentBack(@javax.annotation.Nullable String documentBack) {
    this.documentBack = JsonNullable.<String>of(documentBack);
    return this;
  }

  /**
   * Get documentBack
   * @return documentBack
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDocumentBack() {
        return documentBack.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DOCUMENT_BACK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDocumentBack_JsonNullable() {
    return documentBack;
  }
  
  @JsonProperty(JSON_PROPERTY_DOCUMENT_BACK)
  public void setDocumentBack_JsonNullable(JsonNullable<String> documentBack) {
    this.documentBack = documentBack;
  }

  public void setDocumentBack(@javax.annotation.Nullable String documentBack) {
    this.documentBack = JsonNullable.<String>of(documentBack);
  }


  public AttachmentAccessKeys documentPortrait(@javax.annotation.Nullable String documentPortrait) {
    this.documentPortrait = JsonNullable.<String>of(documentPortrait);
    return this;
  }

  /**
   * Get documentPortrait
   * @return documentPortrait
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDocumentPortrait() {
        return documentPortrait.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DOCUMENT_PORTRAIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDocumentPortrait_JsonNullable() {
    return documentPortrait;
  }
  
  @JsonProperty(JSON_PROPERTY_DOCUMENT_PORTRAIT)
  public void setDocumentPortrait_JsonNullable(JsonNullable<String> documentPortrait) {
    this.documentPortrait = documentPortrait;
  }

  public void setDocumentPortrait(@javax.annotation.Nullable String documentPortrait) {
    this.documentPortrait = JsonNullable.<String>of(documentPortrait);
  }


  public AttachmentAccessKeys provider(@javax.annotation.Nonnull ProviderAttachments provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ProviderAttachments getProvider() {
    return provider;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProvider(@javax.annotation.Nonnull ProviderAttachments provider) {
    this.provider = provider;
  }


  /**
   * Return true if this AttachmentAccessKeys object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentAccessKeys attachmentAccessKeys = (AttachmentAccessKeys) o;
    return equalsNullable(this.selfie, attachmentAccessKeys.selfie) &&
        equalsNullable(this.documentFront, attachmentAccessKeys.documentFront) &&
        equalsNullable(this.documentBack, attachmentAccessKeys.documentBack) &&
        equalsNullable(this.documentPortrait, attachmentAccessKeys.documentPortrait) &&
        Objects.equals(this.provider, attachmentAccessKeys.provider);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(selfie), hashCodeNullable(documentFront), hashCodeNullable(documentBack), hashCodeNullable(documentPortrait), provider);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentAccessKeys {\n");
    sb.append("    selfie: ").append(toIndentedString(selfie)).append("\n");
    sb.append("    documentFront: ").append(toIndentedString(documentFront)).append("\n");
    sb.append("    documentBack: ").append(toIndentedString(documentBack)).append("\n");
    sb.append("    documentPortrait: ").append(toIndentedString(documentPortrait)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `selfie` to the URL query string
    if (getSelfie() != null) {
      joiner.add(String.format("%sselfie%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSelfie()))));
    }

    // add `documentFront` to the URL query string
    if (getDocumentFront() != null) {
      joiner.add(String.format("%sdocumentFront%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDocumentFront()))));
    }

    // add `documentBack` to the URL query string
    if (getDocumentBack() != null) {
      joiner.add(String.format("%sdocumentBack%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDocumentBack()))));
    }

    // add `documentPortrait` to the URL query string
    if (getDocumentPortrait() != null) {
      joiner.add(String.format("%sdocumentPortrait%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDocumentPortrait()))));
    }

    // add `provider` to the URL query string
    if (getProvider() != null) {
      joiner.add(getProvider().toUrlQueryString(prefix + "provider" + suffix));
    }

    return joiner.toString();
  }
}

