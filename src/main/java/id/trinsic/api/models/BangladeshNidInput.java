/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * BangladeshNidInput
 */
@JsonPropertyOrder({
  BangladeshNidInput.JSON_PROPERTY_NATIONAL_ID_NUMBER,
  BangladeshNidInput.JSON_PROPERTY_DATE_OF_BIRTH,
  BangladeshNidInput.JSON_PROPERTY_NAME,
  BangladeshNidInput.JSON_PROPERTY_PHOTO_BYES,
  BangladeshNidInput.JSON_PROPERTY_PHOTO_IMAGE_MIME_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-01T19:33:26.347436485Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class BangladeshNidInput {
  public static final String JSON_PROPERTY_NATIONAL_ID_NUMBER = "nationalIdNumber";
  @javax.annotation.Nonnull
  private String nationalIdNumber;

  public static final String JSON_PROPERTY_DATE_OF_BIRTH = "dateOfBirth";
  @javax.annotation.Nonnull
  private LocalDate dateOfBirth;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_PHOTO_BYES = "photoByes";
  private JsonNullable<byte[]> photoByes = JsonNullable.<byte[]>undefined();

  public static final String JSON_PROPERTY_PHOTO_IMAGE_MIME_TYPE = "photoImageMimeType";
  private JsonNullable<String> photoImageMimeType = JsonNullable.<String>undefined();

  public BangladeshNidInput() { 
  }

  public BangladeshNidInput nationalIdNumber(@javax.annotation.Nonnull String nationalIdNumber) {
    this.nationalIdNumber = nationalIdNumber;
    return this;
  }

  /**
   * The user&#39;s Bangladesh National ID number.
   * @return nationalIdNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NATIONAL_ID_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getNationalIdNumber() {
    return nationalIdNumber;
  }


  @JsonProperty(JSON_PROPERTY_NATIONAL_ID_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNationalIdNumber(@javax.annotation.Nonnull String nationalIdNumber) {
    this.nationalIdNumber = nationalIdNumber;
  }


  public BangladeshNidInput dateOfBirth(@javax.annotation.Nonnull LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The user&#39;s date of birth, in &#x60;YYYY-MM-DD&#x60; format
   * @return dateOfBirth
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE_OF_BIRTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }


  @JsonProperty(JSON_PROPERTY_DATE_OF_BIRTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateOfBirth(@javax.annotation.Nonnull LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public BangladeshNidInput name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The user&#39;s full name
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public BangladeshNidInput photoByes(@javax.annotation.Nullable byte[] photoByes) {
    this.photoByes = JsonNullable.<byte[]>of(photoByes);
    return this;
  }

  /**
   * The raw bytes of the photo file collected from the user.
   * @return photoByes
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public byte[] getPhotoByes() {
        return photoByes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PHOTO_BYES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<byte[]> getPhotoByes_JsonNullable() {
    return photoByes;
  }
  
  @JsonProperty(JSON_PROPERTY_PHOTO_BYES)
  public void setPhotoByes_JsonNullable(JsonNullable<byte[]> photoByes) {
    this.photoByes = photoByes;
  }

  public void setPhotoByes(@javax.annotation.Nullable byte[] photoByes) {
    this.photoByes = JsonNullable.<byte[]>of(photoByes);
  }


  public BangladeshNidInput photoImageMimeType(@javax.annotation.Nullable String photoImageMimeType) {
    this.photoImageMimeType = JsonNullable.<String>of(photoImageMimeType);
    return this;
  }

  /**
   * The MIME Type of the file contained in &#x60;PhotoByes&#x60;.              Must be one of &#x60;image/jpeg&#x60;, or &#x60;image/png&#x60;.
   * @return photoImageMimeType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getPhotoImageMimeType() {
        return photoImageMimeType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PHOTO_IMAGE_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPhotoImageMimeType_JsonNullable() {
    return photoImageMimeType;
  }
  
  @JsonProperty(JSON_PROPERTY_PHOTO_IMAGE_MIME_TYPE)
  public void setPhotoImageMimeType_JsonNullable(JsonNullable<String> photoImageMimeType) {
    this.photoImageMimeType = photoImageMimeType;
  }

  public void setPhotoImageMimeType(@javax.annotation.Nullable String photoImageMimeType) {
    this.photoImageMimeType = JsonNullable.<String>of(photoImageMimeType);
  }


  /**
   * Return true if this BangladeshNidInput object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BangladeshNidInput bangladeshNidInput = (BangladeshNidInput) o;
    return Objects.equals(this.nationalIdNumber, bangladeshNidInput.nationalIdNumber) &&
        Objects.equals(this.dateOfBirth, bangladeshNidInput.dateOfBirth) &&
        Objects.equals(this.name, bangladeshNidInput.name) &&
        equalsNullable(this.photoByes, bangladeshNidInput.photoByes) &&
        equalsNullable(this.photoImageMimeType, bangladeshNidInput.photoImageMimeType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nationalIdNumber, dateOfBirth, name, hashCodeNullable(photoByes), hashCodeNullable(photoImageMimeType));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BangladeshNidInput {\n");
    sb.append("    nationalIdNumber: ").append(toIndentedString(nationalIdNumber)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    photoByes: ").append(toIndentedString(photoByes)).append("\n");
    sb.append("    photoImageMimeType: ").append(toIndentedString(photoImageMimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `nationalIdNumber` to the URL query string
    if (getNationalIdNumber() != null) {
      joiner.add(String.format("%snationalIdNumber%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNationalIdNumber()))));
    }

    // add `dateOfBirth` to the URL query string
    if (getDateOfBirth() != null) {
      joiner.add(String.format("%sdateOfBirth%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDateOfBirth()))));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `photoByes` to the URL query string
    if (getPhotoByes() != null) {
      joiner.add(String.format("%sphotoByes%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPhotoByes()))));
    }

    // add `photoImageMimeType` to the URL query string
    if (getPhotoImageMimeType() != null) {
      joiner.add(String.format("%sphotoImageMimeType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPhotoImageMimeType()))));
    }

    return joiner.toString();
  }
}

