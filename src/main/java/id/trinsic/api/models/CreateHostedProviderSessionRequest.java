/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.trinsic.api.models.ProviderInput;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * CreateHostedProviderSessionRequest
 */
@JsonPropertyOrder({
  CreateHostedProviderSessionRequest.JSON_PROPERTY_PROVIDER,
  CreateHostedProviderSessionRequest.JSON_PROPERTY_REDIRECT_URL,
  CreateHostedProviderSessionRequest.JSON_PROPERTY_PROVIDER_INPUT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-08T20:37:53.342254032Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class CreateHostedProviderSessionRequest {
  public static final String JSON_PROPERTY_PROVIDER = "provider";
  private String provider;

  public static final String JSON_PROPERTY_REDIRECT_URL = "redirectUrl";
  private String redirectUrl;

  public static final String JSON_PROPERTY_PROVIDER_INPUT = "providerInput";
  private JsonNullable<ProviderInput> providerInput = JsonNullable.<ProviderInput>undefined();

  public CreateHostedProviderSessionRequest() { 
  }

  public CreateHostedProviderSessionRequest provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The ID of the provider to launch
   * @return provider
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getProvider() {
    return provider;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProvider(String provider) {
    this.provider = provider;
  }


  public CreateHostedProviderSessionRequest redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * The Redirect URL to which the user should be sent after the session is complete.
   * @return redirectUrl
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getRedirectUrl() {
    return redirectUrl;
  }


  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public CreateHostedProviderSessionRequest providerInput(ProviderInput providerInput) {
    this.providerInput = JsonNullable.<ProviderInput>of(providerInput);
    return this;
  }

  /**
   * Provider-specific input for those providers which require it.
   * @return providerInput
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public ProviderInput getProviderInput() {
        return providerInput.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROVIDER_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ProviderInput> getProviderInput_JsonNullable() {
    return providerInput;
  }
  
  @JsonProperty(JSON_PROPERTY_PROVIDER_INPUT)
  public void setProviderInput_JsonNullable(JsonNullable<ProviderInput> providerInput) {
    this.providerInput = providerInput;
  }

  public void setProviderInput(ProviderInput providerInput) {
    this.providerInput = JsonNullable.<ProviderInput>of(providerInput);
  }


  /**
   * Return true if this CreateHostedProviderSessionRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateHostedProviderSessionRequest createHostedProviderSessionRequest = (CreateHostedProviderSessionRequest) o;
    return Objects.equals(this.provider, createHostedProviderSessionRequest.provider) &&
        Objects.equals(this.redirectUrl, createHostedProviderSessionRequest.redirectUrl) &&
        equalsNullable(this.providerInput, createHostedProviderSessionRequest.providerInput);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(provider, redirectUrl, hashCodeNullable(providerInput));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateHostedProviderSessionRequest {\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    providerInput: ").append(toIndentedString(providerInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `provider` to the URL query string
    if (getProvider() != null) {
      joiner.add(String.format("%sprovider%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getProvider()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `redirectUrl` to the URL query string
    if (getRedirectUrl() != null) {
      joiner.add(String.format("%sredirectUrl%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRedirectUrl()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `providerInput` to the URL query string
    if (getProviderInput() != null) {
      joiner.add(getProviderInput().toUrlQueryString(prefix + "providerInput" + suffix));
    }

    return joiner.toString();
  }
}

