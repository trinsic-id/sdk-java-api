/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.trinsic.api.models.ExternalMdlFieldData;
import id.trinsic.api.models.MdlCertificateData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * MdlIdentityData
 */
@JsonPropertyOrder({
  MdlIdentityData.JSON_PROPERTY_IACA_ROOT_CERTIFICATE,
  MdlIdentityData.JSON_PROPERTY_DOCUMENT_SIGNER_CERTIFICATE,
  MdlIdentityData.JSON_PROPERTY_NAME_SPACES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T21:44:25.982348346Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class MdlIdentityData {
  public static final String JSON_PROPERTY_IACA_ROOT_CERTIFICATE = "iacaRootCertificate";
  @javax.annotation.Nonnull
  private MdlCertificateData iacaRootCertificate;

  public static final String JSON_PROPERTY_DOCUMENT_SIGNER_CERTIFICATE = "documentSignerCertificate";
  @javax.annotation.Nonnull
  private MdlCertificateData documentSignerCertificate;

  public static final String JSON_PROPERTY_NAME_SPACES = "nameSpaces";
  @javax.annotation.Nonnull
  private Map<String, Map<String, ExternalMdlFieldData>> nameSpaces = new HashMap<>();

  public MdlIdentityData() { 
  }

  public MdlIdentityData iacaRootCertificate(@javax.annotation.Nonnull MdlCertificateData iacaRootCertificate) {
    this.iacaRootCertificate = iacaRootCertificate;
    return this;
  }

  /**
   * Information about the IACA Root Certificate which signed the Issuer Certificate for this mDL.
   * @return iacaRootCertificate
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IACA_ROOT_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public MdlCertificateData getIacaRootCertificate() {
    return iacaRootCertificate;
  }


  @JsonProperty(JSON_PROPERTY_IACA_ROOT_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIacaRootCertificate(@javax.annotation.Nonnull MdlCertificateData iacaRootCertificate) {
    this.iacaRootCertificate = iacaRootCertificate;
  }


  public MdlIdentityData documentSignerCertificate(@javax.annotation.Nonnull MdlCertificateData documentSignerCertificate) {
    this.documentSignerCertificate = documentSignerCertificate;
    return this;
  }

  /**
   * Information about the Document Signer Certificate which signed the mDL presented by the user.
   * @return documentSignerCertificate
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOCUMENT_SIGNER_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public MdlCertificateData getDocumentSignerCertificate() {
    return documentSignerCertificate;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_SIGNER_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentSignerCertificate(@javax.annotation.Nonnull MdlCertificateData documentSignerCertificate) {
    this.documentSignerCertificate = documentSignerCertificate;
  }


  public MdlIdentityData nameSpaces(@javax.annotation.Nonnull Map<String, Map<String, ExternalMdlFieldData>> nameSpaces) {
    this.nameSpaces = nameSpaces;
    return this;
  }

  public MdlIdentityData putNameSpacesItem(String key, Map<String, ExternalMdlFieldData> nameSpacesItem) {
    if (this.nameSpaces == null) {
      this.nameSpaces = new HashMap<>();
    }
    this.nameSpaces.put(key, nameSpacesItem);
    return this;
  }

  /**
   * The namespaces, and fields within those namespaces, which were present in the processed mDL.
   * @return nameSpaces
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME_SPACES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Map<String, Map<String, ExternalMdlFieldData>> getNameSpaces() {
    return nameSpaces;
  }


  @JsonProperty(JSON_PROPERTY_NAME_SPACES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNameSpaces(@javax.annotation.Nonnull Map<String, Map<String, ExternalMdlFieldData>> nameSpaces) {
    this.nameSpaces = nameSpaces;
  }


  /**
   * Return true if this MdlIdentityData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdlIdentityData mdlIdentityData = (MdlIdentityData) o;
    return Objects.equals(this.iacaRootCertificate, mdlIdentityData.iacaRootCertificate) &&
        Objects.equals(this.documentSignerCertificate, mdlIdentityData.documentSignerCertificate) &&
        Objects.equals(this.nameSpaces, mdlIdentityData.nameSpaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iacaRootCertificate, documentSignerCertificate, nameSpaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdlIdentityData {\n");
    sb.append("    iacaRootCertificate: ").append(toIndentedString(iacaRootCertificate)).append("\n");
    sb.append("    documentSignerCertificate: ").append(toIndentedString(documentSignerCertificate)).append("\n");
    sb.append("    nameSpaces: ").append(toIndentedString(nameSpaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `iacaRootCertificate` to the URL query string
    if (getIacaRootCertificate() != null) {
      joiner.add(getIacaRootCertificate().toUrlQueryString(prefix + "iacaRootCertificate" + suffix));
    }

    // add `documentSignerCertificate` to the URL query string
    if (getDocumentSignerCertificate() != null) {
      joiner.add(getDocumentSignerCertificate().toUrlQueryString(prefix + "documentSignerCertificate" + suffix));
    }

    // add `nameSpaces` to the URL query string
    if (getNameSpaces() != null) {
      for (String _key : getNameSpaces().keySet()) {
        joiner.add(String.format("%snameSpaces%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getNameSpaces().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getNameSpaces().get(_key)))));
      }
    }

    return joiner.toString();
  }
}

