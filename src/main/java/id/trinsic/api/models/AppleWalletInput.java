/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.trinsic.api.models.MdlExchangeMechanism;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * AppleWalletInput
 */
@JsonPropertyOrder({
  AppleWalletInput.JSON_PROPERTY_EXCHANGE_MECHANISM
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T21:44:25.982348346Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class AppleWalletInput {
  public static final String JSON_PROPERTY_EXCHANGE_MECHANISM = "exchangeMechanism";
  private JsonNullable<MdlExchangeMechanism> exchangeMechanism = JsonNullable.<MdlExchangeMechanism>undefined();

  public AppleWalletInput() { 
  }

  public AppleWalletInput exchangeMechanism(@javax.annotation.Nullable MdlExchangeMechanism exchangeMechanism) {
    this.exchangeMechanism = JsonNullable.<MdlExchangeMechanism>of(exchangeMechanism);
    return this;
  }

  /**
   * The exchange mechanism to use for this Apple Wallet verification.              Use &#x60;DigitalCredentialsApi&#x60; for Digital Credentials API on web, or &#x60;NativeApp&#x60; for a native iOS app.
   * @return exchangeMechanism
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public MdlExchangeMechanism getExchangeMechanism() {
        return exchangeMechanism.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXCHANGE_MECHANISM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<MdlExchangeMechanism> getExchangeMechanism_JsonNullable() {
    return exchangeMechanism;
  }
  
  @JsonProperty(JSON_PROPERTY_EXCHANGE_MECHANISM)
  public void setExchangeMechanism_JsonNullable(JsonNullable<MdlExchangeMechanism> exchangeMechanism) {
    this.exchangeMechanism = exchangeMechanism;
  }

  public void setExchangeMechanism(@javax.annotation.Nullable MdlExchangeMechanism exchangeMechanism) {
    this.exchangeMechanism = JsonNullable.<MdlExchangeMechanism>of(exchangeMechanism);
  }


  /**
   * Return true if this AppleWalletInput object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppleWalletInput appleWalletInput = (AppleWalletInput) o;
    return equalsNullable(this.exchangeMechanism, appleWalletInput.exchangeMechanism);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(exchangeMechanism));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppleWalletInput {\n");
    sb.append("    exchangeMechanism: ").append(toIndentedString(exchangeMechanism)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `exchangeMechanism` to the URL query string
    if (getExchangeMechanism() != null) {
      joiner.add(String.format("%sexchangeMechanism%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getExchangeMechanism()))));
    }

    return joiner.toString();
  }
}

