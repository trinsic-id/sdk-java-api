/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * MdlCertificateData
 */
@JsonPropertyOrder({
  MdlCertificateData.JSON_PROPERTY_SERIAL_NUMBER,
  MdlCertificateData.JSON_PROPERTY_COMMON_NAME,
  MdlCertificateData.JSON_PROPERTY_STATE_OR_PROVINCE_NAME,
  MdlCertificateData.JSON_PROPERTY_NOT_BEFORE,
  MdlCertificateData.JSON_PROPERTY_NOT_AFTER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T21:44:25.982348346Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class MdlCertificateData {
  public static final String JSON_PROPERTY_SERIAL_NUMBER = "serialNumber";
  @javax.annotation.Nonnull
  private String serialNumber;

  public static final String JSON_PROPERTY_COMMON_NAME = "commonName";
  @javax.annotation.Nonnull
  private String commonName;

  public static final String JSON_PROPERTY_STATE_OR_PROVINCE_NAME = "stateOrProvinceName";
  @javax.annotation.Nonnull
  private String stateOrProvinceName;

  public static final String JSON_PROPERTY_NOT_BEFORE = "notBefore";
  @javax.annotation.Nonnull
  private OffsetDateTime notBefore;

  public static final String JSON_PROPERTY_NOT_AFTER = "notAfter";
  @javax.annotation.Nonnull
  private OffsetDateTime notAfter;

  public MdlCertificateData() { 
  }

  public MdlCertificateData serialNumber(@javax.annotation.Nonnull String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The serial number of the certificate
   * @return serialNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getSerialNumber() {
    return serialNumber;
  }


  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSerialNumber(@javax.annotation.Nonnull String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public MdlCertificateData commonName(@javax.annotation.Nonnull String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * The common name (CN) of the certificate
   * @return commonName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMMON_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCommonName() {
    return commonName;
  }


  @JsonProperty(JSON_PROPERTY_COMMON_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCommonName(@javax.annotation.Nonnull String commonName) {
    this.commonName = commonName;
  }


  public MdlCertificateData stateOrProvinceName(@javax.annotation.Nonnull String stateOrProvinceName) {
    this.stateOrProvinceName = stateOrProvinceName;
    return this;
  }

  /**
   * The state or province name (ST) of the certificate.              May be an empty string for certificates which are not state-specific (e.g., Google Wallet&#39;s ID Pass certificates).
   * @return stateOrProvinceName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE_OR_PROVINCE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getStateOrProvinceName() {
    return stateOrProvinceName;
  }


  @JsonProperty(JSON_PROPERTY_STATE_OR_PROVINCE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStateOrProvinceName(@javax.annotation.Nonnull String stateOrProvinceName) {
    this.stateOrProvinceName = stateOrProvinceName;
  }


  public MdlCertificateData notBefore(@javax.annotation.Nonnull OffsetDateTime notBefore) {
    this.notBefore = notBefore;
    return this;
  }

  /**
   * The date before which this certificate is not valid.
   * @return notBefore
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NOT_BEFORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getNotBefore() {
    return notBefore;
  }


  @JsonProperty(JSON_PROPERTY_NOT_BEFORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNotBefore(@javax.annotation.Nonnull OffsetDateTime notBefore) {
    this.notBefore = notBefore;
  }


  public MdlCertificateData notAfter(@javax.annotation.Nonnull OffsetDateTime notAfter) {
    this.notAfter = notAfter;
    return this;
  }

  /**
   * The date after which this certificate is not valid.
   * @return notAfter
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NOT_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getNotAfter() {
    return notAfter;
  }


  @JsonProperty(JSON_PROPERTY_NOT_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNotAfter(@javax.annotation.Nonnull OffsetDateTime notAfter) {
    this.notAfter = notAfter;
  }


  /**
   * Return true if this MdlCertificateData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdlCertificateData mdlCertificateData = (MdlCertificateData) o;
    return Objects.equals(this.serialNumber, mdlCertificateData.serialNumber) &&
        Objects.equals(this.commonName, mdlCertificateData.commonName) &&
        Objects.equals(this.stateOrProvinceName, mdlCertificateData.stateOrProvinceName) &&
        Objects.equals(this.notBefore, mdlCertificateData.notBefore) &&
        Objects.equals(this.notAfter, mdlCertificateData.notAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serialNumber, commonName, stateOrProvinceName, notBefore, notAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdlCertificateData {\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    stateOrProvinceName: ").append(toIndentedString(stateOrProvinceName)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    notAfter: ").append(toIndentedString(notAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `serialNumber` to the URL query string
    if (getSerialNumber() != null) {
      joiner.add(String.format("%sserialNumber%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSerialNumber()))));
    }

    // add `commonName` to the URL query string
    if (getCommonName() != null) {
      joiner.add(String.format("%scommonName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCommonName()))));
    }

    // add `stateOrProvinceName` to the URL query string
    if (getStateOrProvinceName() != null) {
      joiner.add(String.format("%sstateOrProvinceName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getStateOrProvinceName()))));
    }

    // add `notBefore` to the URL query string
    if (getNotBefore() != null) {
      joiner.add(String.format("%snotBefore%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNotBefore()))));
    }

    // add `notAfter` to the URL query string
    if (getNotAfter() != null) {
      joiner.add(String.format("%snotAfter%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNotAfter()))));
    }

    return joiner.toString();
  }
}

