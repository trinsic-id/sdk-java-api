/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.trinsic.api.models.IdentityData;
import id.trinsic.api.models.Session;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * GetSessionResultResponse
 */
@JsonPropertyOrder({
  GetSessionResultResponse.JSON_PROPERTY_SESSION,
  GetSessionResultResponse.JSON_PROPERTY_IDENTITY_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T21:44:25.982348346Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class GetSessionResultResponse {
  public static final String JSON_PROPERTY_SESSION = "session";
  @javax.annotation.Nonnull
  private Session session;

  public static final String JSON_PROPERTY_IDENTITY_DATA = "identityData";
  private JsonNullable<IdentityData> identityData = JsonNullable.<IdentityData>undefined();

  public GetSessionResultResponse() { 
  }

  public GetSessionResultResponse session(@javax.annotation.Nonnull Session session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SESSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Session getSession() {
    return session;
  }


  @JsonProperty(JSON_PROPERTY_SESSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSession(@javax.annotation.Nonnull Session session) {
    this.session = session;
  }


  public GetSessionResultResponse identityData(@javax.annotation.Nullable IdentityData identityData) {
    this.identityData = JsonNullable.<IdentityData>of(identityData);
    return this;
  }

  /**
   * Get identityData
   * @return identityData
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public IdentityData getIdentityData() {
        return identityData.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IDENTITY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<IdentityData> getIdentityData_JsonNullable() {
    return identityData;
  }
  
  @JsonProperty(JSON_PROPERTY_IDENTITY_DATA)
  public void setIdentityData_JsonNullable(JsonNullable<IdentityData> identityData) {
    this.identityData = identityData;
  }

  public void setIdentityData(@javax.annotation.Nullable IdentityData identityData) {
    this.identityData = JsonNullable.<IdentityData>of(identityData);
  }


  /**
   * Return true if this GetSessionResultResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSessionResultResponse getSessionResultResponse = (GetSessionResultResponse) o;
    return Objects.equals(this.session, getSessionResultResponse.session) &&
        equalsNullable(this.identityData, getSessionResultResponse.identityData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(session, hashCodeNullable(identityData));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSessionResultResponse {\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    identityData: ").append(toIndentedString(identityData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `session` to the URL query string
    if (getSession() != null) {
      joiner.add(getSession().toUrlQueryString(prefix + "session" + suffix));
    }

    // add `identityData` to the URL query string
    if (getIdentityData() != null) {
      joiner.add(getIdentityData().toUrlQueryString(prefix + "identityData" + suffix));
    }

    return joiner.toString();
  }
}

