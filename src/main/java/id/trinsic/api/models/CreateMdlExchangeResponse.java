/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * CreateMdlExchangeResponse
 */
@JsonPropertyOrder({
  CreateMdlExchangeResponse.JSON_PROPERTY_EXCHANGE_ID,
  CreateMdlExchangeResponse.JSON_PROPERTY_REQUEST_OBJECT_BASE64_URL,
  CreateMdlExchangeResponse.JSON_PROPERTY_EXCHANGE_CONTEXT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T21:44:25.982348346Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateMdlExchangeResponse {
  public static final String JSON_PROPERTY_EXCHANGE_ID = "exchangeId";
  @javax.annotation.Nonnull
  private UUID exchangeId;

  public static final String JSON_PROPERTY_REQUEST_OBJECT_BASE64_URL = "requestObjectBase64Url";
  @javax.annotation.Nonnull
  private String requestObjectBase64Url;

  public static final String JSON_PROPERTY_EXCHANGE_CONTEXT = "exchangeContext";
  @javax.annotation.Nonnull
  private String exchangeContext;

  public CreateMdlExchangeResponse() { 
  }

  public CreateMdlExchangeResponse exchangeId(@javax.annotation.Nonnull UUID exchangeId) {
    this.exchangeId = exchangeId;
    return this;
  }

  /**
   * The ID of the mDL exchange which was created.
   * @return exchangeId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getExchangeId() {
    return exchangeId;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExchangeId(@javax.annotation.Nonnull UUID exchangeId) {
    this.exchangeId = exchangeId;
  }


  public CreateMdlExchangeResponse requestObjectBase64Url(@javax.annotation.Nonnull String requestObjectBase64Url) {
    this.requestObjectBase64Url = requestObjectBase64Url;
    return this;
  }

  /**
   * The request object for this mDL exchange.              Pass this into a Trinsic mDL SDK (Web, iOS, Android) exactly as-is to initiate the mDL exchange.
   * @return requestObjectBase64Url
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUEST_OBJECT_BASE64_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getRequestObjectBase64Url() {
    return requestObjectBase64Url;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_OBJECT_BASE64_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequestObjectBase64Url(@javax.annotation.Nonnull String requestObjectBase64Url) {
    this.requestObjectBase64Url = requestObjectBase64Url;
  }


  public CreateMdlExchangeResponse exchangeContext(@javax.annotation.Nonnull String exchangeContext) {
    this.exchangeContext = exchangeContext;
    return this;
  }

  /**
   * The encrypted exchange context for this mDL exchange.              This must be passed back to the API during finalization, alongside the response token from the wallet.
   * @return exchangeContext
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCHANGE_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getExchangeContext() {
    return exchangeContext;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExchangeContext(@javax.annotation.Nonnull String exchangeContext) {
    this.exchangeContext = exchangeContext;
  }


  /**
   * Return true if this CreateMdlExchangeResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMdlExchangeResponse createMdlExchangeResponse = (CreateMdlExchangeResponse) o;
    return Objects.equals(this.exchangeId, createMdlExchangeResponse.exchangeId) &&
        Objects.equals(this.requestObjectBase64Url, createMdlExchangeResponse.requestObjectBase64Url) &&
        Objects.equals(this.exchangeContext, createMdlExchangeResponse.exchangeContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exchangeId, requestObjectBase64Url, exchangeContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMdlExchangeResponse {\n");
    sb.append("    exchangeId: ").append(toIndentedString(exchangeId)).append("\n");
    sb.append("    requestObjectBase64Url: ").append(toIndentedString(requestObjectBase64Url)).append("\n");
    sb.append("    exchangeContext: ").append(toIndentedString(exchangeContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `exchangeId` to the URL query string
    if (getExchangeId() != null) {
      joiner.add(String.format("%sexchangeId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getExchangeId()))));
    }

    // add `requestObjectBase64Url` to the URL query string
    if (getRequestObjectBase64Url() != null) {
      joiner.add(String.format("%srequestObjectBase64Url%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequestObjectBase64Url()))));
    }

    // add `exchangeContext` to the URL query string
    if (getExchangeContext() != null) {
      joiner.add(String.format("%sexchangeContext%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getExchangeContext()))));
    }

    return joiner.toString();
  }
}

