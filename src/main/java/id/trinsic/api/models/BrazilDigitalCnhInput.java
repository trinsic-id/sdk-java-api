/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * BrazilDigitalCnhInput
 */
@JsonPropertyOrder({
  BrazilDigitalCnhInput.JSON_PROPERTY_CPF_NUMBER,
  BrazilDigitalCnhInput.JSON_PROPERTY_DIGITAL_CNH_FILE,
  BrazilDigitalCnhInput.JSON_PROPERTY_DIGITAL_CNH_FILE_CONTENT_TYPE,
  BrazilDigitalCnhInput.JSON_PROPERTY_FACIAL_BIOMETRY_PHOTO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-08T20:37:53.342254032Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class BrazilDigitalCnhInput {
  public static final String JSON_PROPERTY_CPF_NUMBER = "cpfNumber";
  private String cpfNumber;

  public static final String JSON_PROPERTY_DIGITAL_CNH_FILE = "digitalCnhFile";
  private JsonNullable<byte[]> digitalCnhFile = JsonNullable.<byte[]>undefined();

  public static final String JSON_PROPERTY_DIGITAL_CNH_FILE_CONTENT_TYPE = "digitalCnhFileContentType";
  private JsonNullable<String> digitalCnhFileContentType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FACIAL_BIOMETRY_PHOTO = "facialBiometryPhoto";
  private JsonNullable<byte[]> facialBiometryPhoto = JsonNullable.<byte[]>undefined();

  public BrazilDigitalCnhInput() { 
  }

  public BrazilDigitalCnhInput cpfNumber(String cpfNumber) {
    this.cpfNumber = cpfNumber;
    return this;
  }

  /**
   * The user&#39;s 11-digit, numeric CPF Number
   * @return cpfNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CPF_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCpfNumber() {
    return cpfNumber;
  }


  @JsonProperty(JSON_PROPERTY_CPF_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCpfNumber(String cpfNumber) {
    this.cpfNumber = cpfNumber;
  }


  public BrazilDigitalCnhInput digitalCnhFile(byte[] digitalCnhFile) {
    this.digitalCnhFile = JsonNullable.<byte[]>of(digitalCnhFile);
    return this;
  }

  /**
   * The raw bytes of the digital CNH file collected from the user.              TODO: Lucas or JP help me describe these below vvvvvvvv This can be: - An image containing a physical or digital QR code - A PDF file exported from the CNH app - Some scary third thing?
   * @return digitalCnhFile
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public byte[] getDigitalCnhFile() {
        return digitalCnhFile.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DIGITAL_CNH_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<byte[]> getDigitalCnhFile_JsonNullable() {
    return digitalCnhFile;
  }
  
  @JsonProperty(JSON_PROPERTY_DIGITAL_CNH_FILE)
  public void setDigitalCnhFile_JsonNullable(JsonNullable<byte[]> digitalCnhFile) {
    this.digitalCnhFile = digitalCnhFile;
  }

  public void setDigitalCnhFile(byte[] digitalCnhFile) {
    this.digitalCnhFile = JsonNullable.<byte[]>of(digitalCnhFile);
  }


  public BrazilDigitalCnhInput digitalCnhFileContentType(String digitalCnhFileContentType) {
    this.digitalCnhFileContentType = JsonNullable.<String>of(digitalCnhFileContentType);
    return this;
  }

  /**
   * The MIME Type of the file contained in &#x60;DigitalCnhFile&#x60;.              Must be one of &#x60;application/pdf&#x60;, &#x60;image/jpeg&#x60;, or &#x60;image/png&#x60;.
   * @return digitalCnhFileContentType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDigitalCnhFileContentType() {
        return digitalCnhFileContentType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DIGITAL_CNH_FILE_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDigitalCnhFileContentType_JsonNullable() {
    return digitalCnhFileContentType;
  }
  
  @JsonProperty(JSON_PROPERTY_DIGITAL_CNH_FILE_CONTENT_TYPE)
  public void setDigitalCnhFileContentType_JsonNullable(JsonNullable<String> digitalCnhFileContentType) {
    this.digitalCnhFileContentType = digitalCnhFileContentType;
  }

  public void setDigitalCnhFileContentType(String digitalCnhFileContentType) {
    this.digitalCnhFileContentType = JsonNullable.<String>of(digitalCnhFileContentType);
  }


  public BrazilDigitalCnhInput facialBiometryPhoto(byte[] facialBiometryPhoto) {
    this.facialBiometryPhoto = JsonNullable.<byte[]>of(facialBiometryPhoto);
    return this;
  }

  /**
   * The raw bytes of the image of the user&#39;s face, collected for biometric comparison.
   * @return facialBiometryPhoto
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public byte[] getFacialBiometryPhoto() {
        return facialBiometryPhoto.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FACIAL_BIOMETRY_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<byte[]> getFacialBiometryPhoto_JsonNullable() {
    return facialBiometryPhoto;
  }
  
  @JsonProperty(JSON_PROPERTY_FACIAL_BIOMETRY_PHOTO)
  public void setFacialBiometryPhoto_JsonNullable(JsonNullable<byte[]> facialBiometryPhoto) {
    this.facialBiometryPhoto = facialBiometryPhoto;
  }

  public void setFacialBiometryPhoto(byte[] facialBiometryPhoto) {
    this.facialBiometryPhoto = JsonNullable.<byte[]>of(facialBiometryPhoto);
  }


  /**
   * Return true if this BrazilDigitalCnhInput object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrazilDigitalCnhInput brazilDigitalCnhInput = (BrazilDigitalCnhInput) o;
    return Objects.equals(this.cpfNumber, brazilDigitalCnhInput.cpfNumber) &&
        equalsNullable(this.digitalCnhFile, brazilDigitalCnhInput.digitalCnhFile) &&
        equalsNullable(this.digitalCnhFileContentType, brazilDigitalCnhInput.digitalCnhFileContentType) &&
        equalsNullable(this.facialBiometryPhoto, brazilDigitalCnhInput.facialBiometryPhoto);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpfNumber, hashCodeNullable(digitalCnhFile), hashCodeNullable(digitalCnhFileContentType), hashCodeNullable(facialBiometryPhoto));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrazilDigitalCnhInput {\n");
    sb.append("    cpfNumber: ").append(toIndentedString(cpfNumber)).append("\n");
    sb.append("    digitalCnhFile: ").append(toIndentedString(digitalCnhFile)).append("\n");
    sb.append("    digitalCnhFileContentType: ").append(toIndentedString(digitalCnhFileContentType)).append("\n");
    sb.append("    facialBiometryPhoto: ").append(toIndentedString(facialBiometryPhoto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `cpfNumber` to the URL query string
    if (getCpfNumber() != null) {
      joiner.add(String.format("%scpfNumber%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpfNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `digitalCnhFile` to the URL query string
    if (getDigitalCnhFile() != null) {
      joiner.add(String.format("%sdigitalCnhFile%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDigitalCnhFile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `digitalCnhFileContentType` to the URL query string
    if (getDigitalCnhFileContentType() != null) {
      joiner.add(String.format("%sdigitalCnhFileContentType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDigitalCnhFileContentType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `facialBiometryPhoto` to the URL query string
    if (getFacialBiometryPhoto() != null) {
      joiner.add(String.format("%sfacialBiometryPhoto%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getFacialBiometryPhoto()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

