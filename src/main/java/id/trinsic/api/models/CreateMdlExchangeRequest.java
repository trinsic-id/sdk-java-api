/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.trinsic.api.models.MdlExchangeMechanism;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * Request to create an mDL Exchange.
 */
@JsonPropertyOrder({
  CreateMdlExchangeRequest.JSON_PROPERTY_VERIFICATION_PROFILE_ID,
  CreateMdlExchangeRequest.JSON_PROPERTY_PROVIDER,
  CreateMdlExchangeRequest.JSON_PROPERTY_EXCHANGE_MECHANISM,
  CreateMdlExchangeRequest.JSON_PROPERTY_DOCUMENT_TYPE,
  CreateMdlExchangeRequest.JSON_PROPERTY_NAME_SPACES,
  CreateMdlExchangeRequest.JSON_PROPERTY_DIGITAL_CREDENTIALS_API_HOST,
  CreateMdlExchangeRequest.JSON_PROPERTY_ANDROID_NATIVE_APP_PACKAGE_NAME,
  CreateMdlExchangeRequest.JSON_PROPERTY_ANDROID_NATIVE_APP_SIGNING_CERTIFICATE_FINGERPRINT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T18:19:51.997950752Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateMdlExchangeRequest {
  public static final String JSON_PROPERTY_VERIFICATION_PROFILE_ID = "verificationProfileId";
  @javax.annotation.Nonnull
  private UUID verificationProfileId;

  public static final String JSON_PROPERTY_PROVIDER = "provider";
  @javax.annotation.Nonnull
  private String provider;

  public static final String JSON_PROPERTY_EXCHANGE_MECHANISM = "exchangeMechanism";
  @javax.annotation.Nonnull
  private MdlExchangeMechanism exchangeMechanism;

  public static final String JSON_PROPERTY_DOCUMENT_TYPE = "documentType";
  @javax.annotation.Nonnull
  private String documentType;

  public static final String JSON_PROPERTY_NAME_SPACES = "nameSpaces";
  @javax.annotation.Nonnull
  private Map<String, Map<String, Boolean>> nameSpaces = new HashMap<>();

  public static final String JSON_PROPERTY_DIGITAL_CREDENTIALS_API_HOST = "digitalCredentialsApiHost";
  private JsonNullable<String> digitalCredentialsApiHost = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ANDROID_NATIVE_APP_PACKAGE_NAME = "androidNativeAppPackageName";
  private JsonNullable<String> androidNativeAppPackageName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ANDROID_NATIVE_APP_SIGNING_CERTIFICATE_FINGERPRINT = "androidNativeAppSigningCertificateFingerprint";
  private JsonNullable<String> androidNativeAppSigningCertificateFingerprint = JsonNullable.<String>undefined();

  public CreateMdlExchangeRequest() { 
  }

  public CreateMdlExchangeRequest verificationProfileId(@javax.annotation.Nonnull UUID verificationProfileId) {
    this.verificationProfileId = verificationProfileId;
    return this;
  }

  /**
   * The ID of the VerificationProfile to use for this mDL exchange.
   * @return verificationProfileId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERIFICATION_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getVerificationProfileId() {
    return verificationProfileId;
  }


  @JsonProperty(JSON_PROPERTY_VERIFICATION_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVerificationProfileId(@javax.annotation.Nonnull UUID verificationProfileId) {
    this.verificationProfileId = verificationProfileId;
  }


  public CreateMdlExchangeRequest provider(@javax.annotation.Nonnull String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The ID of the provider to use for this mDL exchange.
   * @return provider
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getProvider() {
    return provider;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProvider(@javax.annotation.Nonnull String provider) {
    this.provider = provider;
  }


  public CreateMdlExchangeRequest exchangeMechanism(@javax.annotation.Nonnull MdlExchangeMechanism exchangeMechanism) {
    this.exchangeMechanism = exchangeMechanism;
    return this;
  }

  /**
   * The mechanism by which the mDL exchange will occur (web, native SDK, etc.)
   * @return exchangeMechanism
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCHANGE_MECHANISM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public MdlExchangeMechanism getExchangeMechanism() {
    return exchangeMechanism;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_MECHANISM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExchangeMechanism(@javax.annotation.Nonnull MdlExchangeMechanism exchangeMechanism) {
    this.exchangeMechanism = exchangeMechanism;
  }


  public CreateMdlExchangeRequest documentType(@javax.annotation.Nonnull String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * The document type to request from the wallet.              Typically, this is one of the following values:              - &#x60;org.iso.18013.5.1.mDL&#x60; (Mobile Driver&#39;s License) - &#x60;com.google.wallet.idcard.1&#x60; (Google Wallet ID Pass)
   * @return documentType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDocumentType() {
    return documentType;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentType(@javax.annotation.Nonnull String documentType) {
    this.documentType = documentType;
  }


  public CreateMdlExchangeRequest nameSpaces(@javax.annotation.Nonnull Map<String, Map<String, Boolean>> nameSpaces) {
    this.nameSpaces = nameSpaces;
    return this;
  }

  public CreateMdlExchangeRequest putNameSpacesItem(String key, Map<String, Boolean> nameSpacesItem) {
    if (this.nameSpaces == null) {
      this.nameSpaces = new HashMap<>();
    }
    this.nameSpaces.put(key, nameSpacesItem);
    return this;
  }

  /**
   * The namespaces and fields to request from the mDL.              This is a nested map / dictionary. The outer dictionary&#39;s keys are namespaces (e.g. \&quot;org.iso.18013.5.1\&quot;). The inner dictionary&#39;s keys are field names within each namespace, with boolean values indicating whether the specified field will be retained post-verification.
   * @return nameSpaces
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME_SPACES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Map<String, Map<String, Boolean>> getNameSpaces() {
    return nameSpaces;
  }


  @JsonProperty(JSON_PROPERTY_NAME_SPACES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNameSpaces(@javax.annotation.Nonnull Map<String, Map<String, Boolean>> nameSpaces) {
    this.nameSpaces = nameSpaces;
  }


  public CreateMdlExchangeRequest digitalCredentialsApiHost(@javax.annotation.Nullable String digitalCredentialsApiHost) {
    this.digitalCredentialsApiHost = JsonNullable.<String>of(digitalCredentialsApiHost);
    return this;
  }

  /**
   * If using the &#x60;DigitalCredentialsApi&#x60; exchange mechanism, this is the hostname on which the Digital Credentials API will be called.              For example, if the user is on the page &#x60;https://foo.example.com/verify-mdl&#x60;, the proper value to use is &#x60;foo.example.com&#x60;.              Present for ease of testing only. May be removed as this API is stabilized.
   * @return digitalCredentialsApiHost
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDigitalCredentialsApiHost() {
        return digitalCredentialsApiHost.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DIGITAL_CREDENTIALS_API_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDigitalCredentialsApiHost_JsonNullable() {
    return digitalCredentialsApiHost;
  }
  
  @JsonProperty(JSON_PROPERTY_DIGITAL_CREDENTIALS_API_HOST)
  public void setDigitalCredentialsApiHost_JsonNullable(JsonNullable<String> digitalCredentialsApiHost) {
    this.digitalCredentialsApiHost = digitalCredentialsApiHost;
  }

  public void setDigitalCredentialsApiHost(@javax.annotation.Nullable String digitalCredentialsApiHost) {
    this.digitalCredentialsApiHost = JsonNullable.<String>of(digitalCredentialsApiHost);
  }


  public CreateMdlExchangeRequest androidNativeAppPackageName(@javax.annotation.Nullable String androidNativeAppPackageName) {
    this.androidNativeAppPackageName = JsonNullable.<String>of(androidNativeAppPackageName);
    return this;
  }

  /**
   * If using the &#x60;NativeApp&#x60; exchange mechanism with the &#x60;google-wallet&#x60; provider, this is the package name of the Android App which will execute the mDL exchange.              This should be set to the package name of your app.              Present for ease of testing only. May be removed as this API is stabilized.
   * @return androidNativeAppPackageName
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getAndroidNativeAppPackageName() {
        return androidNativeAppPackageName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ANDROID_NATIVE_APP_PACKAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAndroidNativeAppPackageName_JsonNullable() {
    return androidNativeAppPackageName;
  }
  
  @JsonProperty(JSON_PROPERTY_ANDROID_NATIVE_APP_PACKAGE_NAME)
  public void setAndroidNativeAppPackageName_JsonNullable(JsonNullable<String> androidNativeAppPackageName) {
    this.androidNativeAppPackageName = androidNativeAppPackageName;
  }

  public void setAndroidNativeAppPackageName(@javax.annotation.Nullable String androidNativeAppPackageName) {
    this.androidNativeAppPackageName = JsonNullable.<String>of(androidNativeAppPackageName);
  }


  public CreateMdlExchangeRequest androidNativeAppSigningCertificateFingerprint(@javax.annotation.Nullable String androidNativeAppSigningCertificateFingerprint) {
    this.androidNativeAppSigningCertificateFingerprint = JsonNullable.<String>of(androidNativeAppSigningCertificateFingerprint);
    return this;
  }

  /**
   * If using the &#x60;NativeApp&#x60; exchange mechanism with the &#x60;google-wallet&#x60; provider, this is the SHA-256 fingerprint of the signing certificate used to sign the Android App which will execute the mDL exchange.              Present for ease of testing only. May be removed as this API is stabilized.
   * @return androidNativeAppSigningCertificateFingerprint
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getAndroidNativeAppSigningCertificateFingerprint() {
        return androidNativeAppSigningCertificateFingerprint.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ANDROID_NATIVE_APP_SIGNING_CERTIFICATE_FINGERPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAndroidNativeAppSigningCertificateFingerprint_JsonNullable() {
    return androidNativeAppSigningCertificateFingerprint;
  }
  
  @JsonProperty(JSON_PROPERTY_ANDROID_NATIVE_APP_SIGNING_CERTIFICATE_FINGERPRINT)
  public void setAndroidNativeAppSigningCertificateFingerprint_JsonNullable(JsonNullable<String> androidNativeAppSigningCertificateFingerprint) {
    this.androidNativeAppSigningCertificateFingerprint = androidNativeAppSigningCertificateFingerprint;
  }

  public void setAndroidNativeAppSigningCertificateFingerprint(@javax.annotation.Nullable String androidNativeAppSigningCertificateFingerprint) {
    this.androidNativeAppSigningCertificateFingerprint = JsonNullable.<String>of(androidNativeAppSigningCertificateFingerprint);
  }


  /**
   * Return true if this CreateMdlExchangeRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMdlExchangeRequest createMdlExchangeRequest = (CreateMdlExchangeRequest) o;
    return Objects.equals(this.verificationProfileId, createMdlExchangeRequest.verificationProfileId) &&
        Objects.equals(this.provider, createMdlExchangeRequest.provider) &&
        Objects.equals(this.exchangeMechanism, createMdlExchangeRequest.exchangeMechanism) &&
        Objects.equals(this.documentType, createMdlExchangeRequest.documentType) &&
        Objects.equals(this.nameSpaces, createMdlExchangeRequest.nameSpaces) &&
        equalsNullable(this.digitalCredentialsApiHost, createMdlExchangeRequest.digitalCredentialsApiHost) &&
        equalsNullable(this.androidNativeAppPackageName, createMdlExchangeRequest.androidNativeAppPackageName) &&
        equalsNullable(this.androidNativeAppSigningCertificateFingerprint, createMdlExchangeRequest.androidNativeAppSigningCertificateFingerprint);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(verificationProfileId, provider, exchangeMechanism, documentType, nameSpaces, hashCodeNullable(digitalCredentialsApiHost), hashCodeNullable(androidNativeAppPackageName), hashCodeNullable(androidNativeAppSigningCertificateFingerprint));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMdlExchangeRequest {\n");
    sb.append("    verificationProfileId: ").append(toIndentedString(verificationProfileId)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    exchangeMechanism: ").append(toIndentedString(exchangeMechanism)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    nameSpaces: ").append(toIndentedString(nameSpaces)).append("\n");
    sb.append("    digitalCredentialsApiHost: ").append(toIndentedString(digitalCredentialsApiHost)).append("\n");
    sb.append("    androidNativeAppPackageName: ").append(toIndentedString(androidNativeAppPackageName)).append("\n");
    sb.append("    androidNativeAppSigningCertificateFingerprint: ").append(toIndentedString(androidNativeAppSigningCertificateFingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `verificationProfileId` to the URL query string
    if (getVerificationProfileId() != null) {
      joiner.add(String.format("%sverificationProfileId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVerificationProfileId()))));
    }

    // add `provider` to the URL query string
    if (getProvider() != null) {
      joiner.add(String.format("%sprovider%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getProvider()))));
    }

    // add `exchangeMechanism` to the URL query string
    if (getExchangeMechanism() != null) {
      joiner.add(String.format("%sexchangeMechanism%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getExchangeMechanism()))));
    }

    // add `documentType` to the URL query string
    if (getDocumentType() != null) {
      joiner.add(String.format("%sdocumentType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDocumentType()))));
    }

    // add `nameSpaces` to the URL query string
    if (getNameSpaces() != null) {
      for (String _key : getNameSpaces().keySet()) {
        joiner.add(String.format("%snameSpaces%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getNameSpaces().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getNameSpaces().get(_key)))));
      }
    }

    // add `digitalCredentialsApiHost` to the URL query string
    if (getDigitalCredentialsApiHost() != null) {
      joiner.add(String.format("%sdigitalCredentialsApiHost%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDigitalCredentialsApiHost()))));
    }

    // add `androidNativeAppPackageName` to the URL query string
    if (getAndroidNativeAppPackageName() != null) {
      joiner.add(String.format("%sandroidNativeAppPackageName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAndroidNativeAppPackageName()))));
    }

    // add `androidNativeAppSigningCertificateFingerprint` to the URL query string
    if (getAndroidNativeAppSigningCertificateFingerprint() != null) {
      joiner.add(String.format("%sandroidNativeAppSigningCertificateFingerprint%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAndroidNativeAppSigningCertificateFingerprint()))));
    }

    return joiner.toString();
  }
}

