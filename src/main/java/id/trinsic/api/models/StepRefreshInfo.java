/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * StepRefreshInfo
 */
@JsonPropertyOrder({
  StepRefreshInfo.JSON_PROPERTY_EXPIRES_AT,
  StepRefreshInfo.JSON_PROPERTY_REFRESH_AFTER,
  StepRefreshInfo.JSON_PROPERTY_TIME_TO_LIVE_SECONDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T18:19:51.997950752Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class StepRefreshInfo {
  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  @javax.annotation.Nonnull
  private OffsetDateTime expiresAt;

  public static final String JSON_PROPERTY_REFRESH_AFTER = "refreshAfter";
  @javax.annotation.Nonnull
  private OffsetDateTime refreshAfter;

  public static final String JSON_PROPERTY_TIME_TO_LIVE_SECONDS = "timeToLiveSeconds";
  @javax.annotation.Nonnull
  private Integer timeToLiveSeconds;

  public StepRefreshInfo() { 
  }

  public StepRefreshInfo expiresAt(@javax.annotation.Nonnull OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * The UTC date/time at which the step &#x60;content&#x60; will expire and should no longer be used.              Use the &#x60;Refresh Step Content&#x60; API to obtain a new value for &#x60;content&#x60;.
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresAt(@javax.annotation.Nonnull OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public StepRefreshInfo refreshAfter(@javax.annotation.Nonnull OffsetDateTime refreshAfter) {
    this.refreshAfter = refreshAfter;
    return this;
  }

  /**
   * The UTC date/time after which Trinsic recommends you refresh the step &#x60;content&#x60;.
   * @return refreshAfter
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REFRESH_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getRefreshAfter() {
    return refreshAfter;
  }


  @JsonProperty(JSON_PROPERTY_REFRESH_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRefreshAfter(@javax.annotation.Nonnull OffsetDateTime refreshAfter) {
    this.refreshAfter = refreshAfter;
  }


  public StepRefreshInfo timeToLiveSeconds(@javax.annotation.Nonnull Integer timeToLiveSeconds) {
    this.timeToLiveSeconds = timeToLiveSeconds;
    return this;
  }

  /**
   * The total lifetime of the step &#x60;content&#x60;.
   * @return timeToLiveSeconds
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIME_TO_LIVE_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getTimeToLiveSeconds() {
    return timeToLiveSeconds;
  }


  @JsonProperty(JSON_PROPERTY_TIME_TO_LIVE_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimeToLiveSeconds(@javax.annotation.Nonnull Integer timeToLiveSeconds) {
    this.timeToLiveSeconds = timeToLiveSeconds;
  }


  /**
   * Return true if this StepRefreshInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StepRefreshInfo stepRefreshInfo = (StepRefreshInfo) o;
    return Objects.equals(this.expiresAt, stepRefreshInfo.expiresAt) &&
        Objects.equals(this.refreshAfter, stepRefreshInfo.refreshAfter) &&
        Objects.equals(this.timeToLiveSeconds, stepRefreshInfo.timeToLiveSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiresAt, refreshAfter, timeToLiveSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StepRefreshInfo {\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    refreshAfter: ").append(toIndentedString(refreshAfter)).append("\n");
    sb.append("    timeToLiveSeconds: ").append(toIndentedString(timeToLiveSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `expiresAt` to the URL query string
    if (getExpiresAt() != null) {
      joiner.add(String.format("%sexpiresAt%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getExpiresAt()))));
    }

    // add `refreshAfter` to the URL query string
    if (getRefreshAfter() != null) {
      joiner.add(String.format("%srefreshAfter%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRefreshAfter()))));
    }

    // add `timeToLiveSeconds` to the URL query string
    if (getTimeToLiveSeconds() != null) {
      joiner.add(String.format("%stimeToLiveSeconds%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTimeToLiveSeconds()))));
    }

    return joiner.toString();
  }
}

