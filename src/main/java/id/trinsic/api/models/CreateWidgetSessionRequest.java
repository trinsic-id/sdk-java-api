/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.trinsic.api.models.RecommendationInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * CreateWidgetSessionRequest
 */
@JsonPropertyOrder({
  CreateWidgetSessionRequest.JSON_PROPERTY_VERIFICATION_PROFILE_ID,
  CreateWidgetSessionRequest.JSON_PROPERTY_REDIRECT_URL,
  CreateWidgetSessionRequest.JSON_PROPERTY_PROVIDERS,
  CreateWidgetSessionRequest.JSON_PROPERTY_RECOMMENDATION_INFO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T21:44:25.982348346Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateWidgetSessionRequest {
  public static final String JSON_PROPERTY_VERIFICATION_PROFILE_ID = "verificationProfileId";
  @javax.annotation.Nonnull
  private UUID verificationProfileId;

  public static final String JSON_PROPERTY_REDIRECT_URL = "redirectUrl";
  private JsonNullable<String> redirectUrl = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PROVIDERS = "providers";
  private JsonNullable<List<String>> providers = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_RECOMMENDATION_INFO = "recommendationInfo";
  private JsonNullable<RecommendationInfo> recommendationInfo = JsonNullable.<RecommendationInfo>undefined();

  public CreateWidgetSessionRequest() { 
  }

  public CreateWidgetSessionRequest verificationProfileId(@javax.annotation.Nonnull UUID verificationProfileId) {
    this.verificationProfileId = verificationProfileId;
    return this;
  }

  /**
   * The ID of the Verification Profile to use for this session.
   * @return verificationProfileId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERIFICATION_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getVerificationProfileId() {
    return verificationProfileId;
  }


  @JsonProperty(JSON_PROPERTY_VERIFICATION_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVerificationProfileId(@javax.annotation.Nonnull UUID verificationProfileId) {
    this.verificationProfileId = verificationProfileId;
  }


  public CreateWidgetSessionRequest redirectUrl(@javax.annotation.Nullable String redirectUrl) {
    this.redirectUrl = JsonNullable.<String>of(redirectUrl);
    return this;
  }

  /**
   * The URL to redirect the user to after the widget session is complete.              *Note*: this should NOT be set if you intend to use Trinsic&#39;s Web UI SDK to launch the Widget as a popup; in that case, session resolution is handled by our SDK, not via redirect.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getRedirectUrl() {
        return redirectUrl.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRedirectUrl_JsonNullable() {
    return redirectUrl;
  }
  
  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  public void setRedirectUrl_JsonNullable(JsonNullable<String> redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

  public void setRedirectUrl(@javax.annotation.Nullable String redirectUrl) {
    this.redirectUrl = JsonNullable.<String>of(redirectUrl);
  }


  public CreateWidgetSessionRequest providers(@javax.annotation.Nullable List<String> providers) {
    this.providers = JsonNullable.<List<String>>of(providers);
    return this;
  }

  public CreateWidgetSessionRequest addProvidersItem(String providersItem) {
    if (this.providers == null || !this.providers.isPresent()) {
      this.providers = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.providers.get().add(providersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * The list of allowed identity providers. If not specified, all available providers will be allowed.
   * @return providers
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getProviders() {
        return providers.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROVIDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getProviders_JsonNullable() {
    return providers;
  }
  
  @JsonProperty(JSON_PROPERTY_PROVIDERS)
  public void setProviders_JsonNullable(JsonNullable<List<String>> providers) {
    this.providers = providers;
  }

  public void setProviders(@javax.annotation.Nullable List<String> providers) {
    this.providers = JsonNullable.<List<String>>of(providers);
  }


  public CreateWidgetSessionRequest recommendationInfo(@javax.annotation.Nullable RecommendationInfo recommendationInfo) {
    this.recommendationInfo = JsonNullable.<RecommendationInfo>of(recommendationInfo);
    return this;
  }

  /**
   * Data that you already know about the user being verified.   This data is used to improve the user experience during provider selection, by surfacing the most relevant providers first.
   * @return recommendationInfo
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public RecommendationInfo getRecommendationInfo() {
        return recommendationInfo.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RECOMMENDATION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<RecommendationInfo> getRecommendationInfo_JsonNullable() {
    return recommendationInfo;
  }
  
  @JsonProperty(JSON_PROPERTY_RECOMMENDATION_INFO)
  public void setRecommendationInfo_JsonNullable(JsonNullable<RecommendationInfo> recommendationInfo) {
    this.recommendationInfo = recommendationInfo;
  }

  public void setRecommendationInfo(@javax.annotation.Nullable RecommendationInfo recommendationInfo) {
    this.recommendationInfo = JsonNullable.<RecommendationInfo>of(recommendationInfo);
  }


  /**
   * Return true if this CreateWidgetSessionRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWidgetSessionRequest createWidgetSessionRequest = (CreateWidgetSessionRequest) o;
    return Objects.equals(this.verificationProfileId, createWidgetSessionRequest.verificationProfileId) &&
        equalsNullable(this.redirectUrl, createWidgetSessionRequest.redirectUrl) &&
        equalsNullable(this.providers, createWidgetSessionRequest.providers) &&
        equalsNullable(this.recommendationInfo, createWidgetSessionRequest.recommendationInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(verificationProfileId, hashCodeNullable(redirectUrl), hashCodeNullable(providers), hashCodeNullable(recommendationInfo));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWidgetSessionRequest {\n");
    sb.append("    verificationProfileId: ").append(toIndentedString(verificationProfileId)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    recommendationInfo: ").append(toIndentedString(recommendationInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `verificationProfileId` to the URL query string
    if (getVerificationProfileId() != null) {
      joiner.add(String.format("%sverificationProfileId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVerificationProfileId()))));
    }

    // add `redirectUrl` to the URL query string
    if (getRedirectUrl() != null) {
      joiner.add(String.format("%sredirectUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRedirectUrl()))));
    }

    // add `providers` to the URL query string
    if (getProviders() != null) {
      for (int i = 0; i < getProviders().size(); i++) {
        joiner.add(String.format("%sproviders%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getProviders().get(i)))));
      }
    }

    // add `recommendationInfo` to the URL query string
    if (getRecommendationInfo() != null) {
      joiner.add(getRecommendationInfo().toUrlQueryString(prefix + "recommendationInfo" + suffix));
    }

    return joiner.toString();
  }
}

