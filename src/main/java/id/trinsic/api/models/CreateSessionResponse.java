/*
 * Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.trinsic.api.models.Session;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import id.trinsic.ApiClient;
/**
 * CreateSessionResponse
 */
@JsonPropertyOrder({
  CreateSessionResponse.JSON_PROPERTY_SESSION,
  CreateSessionResponse.JSON_PROPERTY_LAUNCH_URL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-04T20:20:30.807100Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class CreateSessionResponse {
  public static final String JSON_PROPERTY_SESSION = "session";
  private Session session;

  public static final String JSON_PROPERTY_LAUNCH_URL = "launchUrl";
  private String launchUrl;

  public CreateSessionResponse() { 
  }

  public CreateSessionResponse session(Session session) {
    this.session = session;
    return this;
  }

  /**
   * The created Acceptance Session
   * @return session
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SESSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Session getSession() {
    return session;
  }


  @JsonProperty(JSON_PROPERTY_SESSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSession(Session session) {
    this.session = session;
  }


  public CreateSessionResponse launchUrl(String launchUrl) {
    this.launchUrl = launchUrl;
    return this;
  }

  /**
   * The URL that should be used to invoke the Acceptance Session on your user&#39;s device.                You can use our frontend SDKs to launch the user into the Acceptance Session, or you can redirect the user&#39;s browser to this URL.  If the Session was created with &#x60;LaunchProviderDirectly&#x60; set to &#x60;true&#x60;, you can&#39;t use the iFrame mode.                This URL is sensitive and as such can only be obtained once. If you need to obtain it again, you will need to create a new Acceptance Session.
   * @return launchUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAUNCH_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLaunchUrl() {
    return launchUrl;
  }


  @JsonProperty(JSON_PROPERTY_LAUNCH_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLaunchUrl(String launchUrl) {
    this.launchUrl = launchUrl;
  }


  /**
   * Return true if this CreateSessionResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSessionResponse createSessionResponse = (CreateSessionResponse) o;
    return Objects.equals(this.session, createSessionResponse.session) &&
        Objects.equals(this.launchUrl, createSessionResponse.launchUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(session, launchUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSessionResponse {\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    launchUrl: ").append(toIndentedString(launchUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `session` to the URL query string
    if (getSession() != null) {
      joiner.add(getSession().toUrlQueryString(prefix + "session" + suffix));
    }

    // add `launchUrl` to the URL query string
    if (getLaunchUrl() != null) {
      joiner.add(String.format("%slaunchUrl%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLaunchUrl()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

