/*
 * Trinsic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package id.trinsic.api;

import id.trinsic.ApiException;
import id.trinsic.api.models.CancelSessionResponse;
import id.trinsic.api.models.CreateDirectProviderSessionRequest;
import id.trinsic.api.models.CreateDirectProviderSessionResponse;
import id.trinsic.api.models.CreateHostedProviderSessionRequest;
import id.trinsic.api.models.CreateHostedProviderSessionResponse;
import id.trinsic.api.models.CreateWidgetSessionRequest;
import id.trinsic.api.models.CreateWidgetSessionResponse;
import id.trinsic.api.models.GetSessionResponse;
import id.trinsic.api.models.GetSessionResultRequest;
import id.trinsic.api.models.GetSessionResultResponse;
import id.trinsic.api.models.ListSessionsResponse;
import id.trinsic.api.models.OrderDirection;
import id.trinsic.api.models.ProblemDetails;
import id.trinsic.api.models.RefreshStepContentRequest;
import id.trinsic.api.models.RefreshStepContentResponse;
import id.trinsic.api.models.SessionOrdering;
import id.trinsic.api.models.SubmitNativeChallengeResponseRequest;
import id.trinsic.api.models.SubmitNativeChallengeResponseResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for SessionsApi
 */
@Disabled
public class SessionsApiTest {

    private final SessionsApi api = new SessionsApi();

    
    /**
     * Cancel Session
     *
     * Cancel a Session by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelSessionTest() throws ApiException {
        UUID sessionId = null;
        CancelSessionResponse response = 
        api.cancelSession(sessionId);
        
        // TODO: test validations
    }
    
    /**
     * Create Direct Provider Session
     *
     * Verify a user&#39;s identity with a specific provider, handling additional user interaction in your own UI.   Signal which kinds of user interactions your UI can handle using the &#x60;Capabilities&#x60; field.   If &#x60;FallbackToHostedUi&#x60; is &#x60;true&#x60;, Trinsic&#39;s hosted UI will automatically be invoked to handle any capabilities you do not support.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDirectProviderSessionTest() throws ApiException {
        CreateDirectProviderSessionRequest createDirectProviderSessionRequest = null;
        CreateDirectProviderSessionResponse response = 
        api.createDirectProviderSession(createDirectProviderSessionRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create Hosted Provider Session
     *
     * Verify a user&#39;s identity with a specific provider, using Trinsic-hosted UI for providers which require additional user interaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHostedProviderSessionTest() throws ApiException {
        CreateHostedProviderSessionRequest createHostedProviderSessionRequest = null;
        CreateHostedProviderSessionResponse response = 
        api.createHostedProviderSession(createHostedProviderSessionRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create Widget Session
     *
     * Verify a user&#39;s identity using Trinsic&#39;s hosted Widget flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWidgetSessionTest() throws ApiException {
        CreateWidgetSessionRequest createWidgetSessionRequest = null;
        CreateWidgetSessionResponse response = 
        api.createWidgetSession(createWidgetSessionRequest);
        
        // TODO: test validations
    }
    
    /**
     * Get Session
     *
     * Get a Session by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSessionTest() throws ApiException {
        UUID sessionId = null;
        GetSessionResponse response = 
        api.getSession(sessionId);
        
        // TODO: test validations
    }
    
    /**
     * Get Session Results
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSessionResultTest() throws ApiException {
        UUID sessionId = null;
        GetSessionResultRequest getSessionResultRequest = null;
        GetSessionResultResponse response = 
        api.getSessionResult(sessionId, getSessionResultRequest);
        
        // TODO: test validations
    }
    
    /**
     * List Sessions
     *
     * List Sessions created for a specific Verification Profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSessionsTest() throws ApiException {
        UUID verificationProfileId = null;
        SessionOrdering orderBy = null;
        OrderDirection orderDirection = null;
        Integer pageSize = null;
        Integer page = null;
        ListSessionsResponse response = 
        api.listSessions(verificationProfileId, orderBy, orderDirection, pageSize, page);
        
        // TODO: test validations
    }
    
    /**
     * Redact Session
     *
     * Redact a Session, removing all identity data from Trinsic&#39;s servers. Every application has a redaction period that dictates how long we will hold on to your users&#39; PII data. Once a session falls outside the redaction cutoff date, all PII will automatically be removed from that session. You can utilize this endpoint to redact a session immediately.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redactSessionTest() throws ApiException {
        UUID sessionId = null;
        
        api.redactSession(sessionId);
        
        // TODO: test validations
    }
    
    /**
     * Refresh Step Content
     *
     * Refreshes the content of a Step for a Direct Provider Session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshStepContentTest() throws ApiException {
        UUID acceptanceSessionId = null;
        RefreshStepContentRequest refreshStepContentRequest = null;
        RefreshStepContentResponse response = 
        api.refreshStepContent(acceptanceSessionId, refreshStepContentRequest);
        
        // TODO: test validations
    }
    
    /**
     * Submit Native Challenge Response
     *
     * Submits the response from a Native Challenge (e.g., mDL exchange via DC API) and processes the results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitNativeChallengeResponseTest() throws ApiException {
        UUID acceptanceSessionId = null;
        SubmitNativeChallengeResponseRequest submitNativeChallengeResponseRequest = null;
        SubmitNativeChallengeResponseResponse response = 
        api.submitNativeChallengeResponse(acceptanceSessionId, submitNativeChallengeResponseRequest);
        
        // TODO: test validations
    }
    
}
